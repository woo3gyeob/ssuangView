import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
    ext {
        springBootVer = '2.4.5'
        springDependencyMgmtVer = '1.0.11'
        springLoadedVer = '1.2.8'
        nodePluginVer = '1.3.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
//        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVer}"
    id 'java'
    id 'idea'
}
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.node-gradle.node'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
    maven { url "https://plugins.gradle.org/m2/" }
}

group = 'com.hadoop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

//node {
//    download = true
//    version = '14.17.0'
//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/../frontend")
//}
task webpack(type: NpmTask, dependsOn: 'npmInstall') {
    args = ['run','build']
}
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}

project.ext.set("build.date", buildTime())
processResources {
    with copySpec {
        duplicatesStrategy = 'include'
        from "src/main/resources"
        include "**/application*.yml"
        include "**/application*.yaml"
        include "**/application*.properties"
        project.properties.findAll().each {
            prop ->
                if (prop.value != null) {
                    filter(ReplaceTokens, tokens: [(prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
                }
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'commons-io:commons-io:2.6'

}


test {
    useJUnitPlatform()
}
